# Load libraries
library(ggplot2)
library(dplyr)
library(openxlsx)
library(rstatix)

# Read data
Overall_data <- read_excel("S:/Lab_Member/Tobi/Experiments/Exp9_Social-Stress/Analysis/SIS_Analysis/E9_Behavior_Data.xlsx", sheet = "Overall")

# Select specific animals by ID and change their Group to "SUS"
sus_animals <- c("755","764","771","111","750","112","0004") # replace with your specific animal IDs

Overall_data <- Overall_data %>%
    mutate(Group = if_else(ID %in% sus_animals, "SUS",
                           if_else(Group == "SIS", "RES", Group)))

# Define group colors
group_cols <- c("#1e3791", "#76A2E8", "#F79719")

# Create a function to generate plots for each variable and sex
generate_plot <- function(data, variable_name, sex) {
    filtered_data <- data %>%
        filter(Sex == sex)
    
    p <- ggplot(filtered_data, aes(Group, .data[[variable_name]], color = Group)) +
        scale_x_discrete(name = NULL, expand = c(0.3, 0.1)) + 
        scale_y_continuous(expand = c(0.1, 0.1)) +
        geom_jitter(aes(fill = Group), size = 4, alpha = 0.7, width = 0.2, shape = 16) +
        stat_summary(
            fun.min = function(z) {quantile(z, 0.25)},
            fun.max = function(z) {quantile(z, 0.75)},
            fun = median,
            color = "black",
            size = 0.8,
            shape = 16
        ) +
        labs(title = bquote(~bold(.(variable_name))),
             subtitle = paste("(", sex, ")", sep = ""),
             caption = "",
             x = NULL,
             y = "z score [a.u.]") +
        scale_color_manual(name = NULL, values = group_cols) +
        scale_fill_manual(name = NULL, values = group_cols) +
        theme_minimal_hgrid(12, rel_small = 1) +
        theme(plot.title = element_text(hjust = 0.5, face = "plain"),
              plot.subtitle = element_text(hjust = 0.5, size = 10, face = "plain"),
              legend.position = "none",  # Remove the legend
              axis.title.x = element_blank(),
              axis.text.x = element_text(),  # Rotate and align x-axis labels
              axis.ticks.x = element_blank()
        )
    return(p)
}

# Function to perform Wilcoxon rank-sum test
perform_wilcoxon_test <- function(data_group1, data_group2) {
    if (length(data_group1) >= 3 && length(data_group2) >= 3) {
        return(wilcox.test(data_group1, data_group2))
    } else {
        return(NULL) # Return NULL if there are not enough observations in one of the groups
    }
}

# Function to perform normality test and appropriate test (ANOVA/Kruskal-Wallis or Wilcoxon rank-sum test) for each variable and sex
test_and_plot_variable <- function(data, variable_name, sex) {
    filtered_data <- data %>%
        filter(Sex == sex)
    
    # Perform normality test for each group
    unique_groups <- unique(filtered_data$Group)
    num_groups <- length(unique_groups)
    
    if (num_groups == 2) {
        # Perform pairwise comparisons for cases with two groups
        group1 <- unique_groups[1]
        group2 <- unique_groups[2]
        
        data_group1 <- filtered_data[[variable_name]][filtered_data$Group == group1]
        data_group2 <- filtered_data[[variable_name]][filtered_data$Group == group2]
        
        # Check if there are enough observations in both groups
        if (sum(!is.na(data_group1)) >= 3 && sum(!is.na(data_group2)) >= 3) {
            wilcox_res <- perform_wilcoxon_test(data_group1, data_group2)
            
            # Check if the Wilcoxon test could be performed
            if (!is.null(wilcox_res)) {
                # Store test results in a list
                test_results <- list(
                    Variable = variable_name,
                    Sex = sex,
                    Test = "Wilcoxon rank-sum test",
                    CON_Normality = NA,
                    RES_Normality = NA,
                    SUS_Normality = NA,
                    P_Value = wilcox_res$p.value,
                    Significance_Level = sprintf("%.3f", wilcox_res$p.value)
                )
                
                # Generate the plot
                p <- generate_plot(filtered_data, variable_name, sex)
                
                return(list(test_results = test_results, plot = p))
            }
        }
    } else {
        # Perform normality test for each group
        con_norm <- shapiro.test(filtered_data[[variable_name]][filtered_data$Group == "CON"])
        res_norm <- shapiro.test(filtered_data[[variable_name]][filtered_data$Group == "RES"])
        
        # Check if there is at least one sample in the SUS group for the specified sex
        sus_group_exists <- any(filtered_data$Group == "SUS")
        if (sus_group_exists) {
            sus_norm <- shapiro.test(filtered_data[[variable_name]][filtered_data$Group == "SUS"])
        } else {
            sus_norm <- list(p.value = 1)  # Set p-value to 1 when SUS group is missing
        }
        
        # Check if any of the normality tests result in a missing value (i.e., not enough observations in a group)
        if (is.na(con_norm$p.value) || is.na(res_norm$p.value) || is.na(sus_norm$p.value)) {
            return(NULL) # Return NULL if there are not enough observations in one of the groups
        }
        
        # Store test results in a list
        test_results <- list(
            Variable = variable_name,
            Sex = sex,
            CON_Normality = con_norm$p.value,
            RES_Normality = res_norm$p.value,
            SUS_Normality = sus_norm$p.value
        )
        
        # Check if there are more than two groups
        if (num_groups > 2) {
            # Perform ANOVA if all groups are normal, otherwise use Kruskal-Wallis
            if (con_norm$p.value >= 0.05 && res_norm$p.value >= 0.05 && sus_norm$p.value >= 0.05) {
                # If all groups are normal, use ANOVA
                anova_test <- aov(as.formula(paste(variable_name, "~ Group")), data = filtered_data)
                test_results$Test <- "ANOVA"
                test_results$P_Value <- summary(anova_test)[[1]][["Pr(>F)"]][1]
                test_results$Significance_Level <- sprintf("%.3f", test_results$P_Value)
            } else {
                # If at least one group is not normal, use Kruskal-Wallis test
                kruskal_test <- kruskal.test(as.formula(paste(variable_name, "~ Group")), data = filtered_data)
                test_results$Test <- "Kruskal-Wallis"
                test_results$P_Value <- kruskal_test$p.value
                test_results$Significance_Level <- sprintf("%.3f", p.adjust(test_results$P_Value, method = "BH"))
            }
        }
        
        # Generate the plot
        p <- generate_plot(filtered_data, variable_name, sex)
        
        return(list(test_results = test_results, plot = p))
    }
}

# Get the list of columns to plot (excluding "ID", "Group", and "Sex")
columns_to_plot <- setdiff(names(Overall_data), c("ID", "Group", "Sex", "Batch"))

# Initialize empty lists to store test results and plots
all_test_results <- list()
all_plots <- list()

# Iterate through each variable and sex, and perform tests
for (variable in columns_to_plot) {
    for (sex in c("m", "f")) {
        result <- test_and_plot_variable(Overall_data, variable, sex)
        if (!is.null(result)) {
            all_test_results <- c(all_test_results, list(result$test_results))
            all_plots <- c(all_plots, list(result$plot))
        }
    }
}

# Convert the list of test results to a data frame
all_test_results_df <- do.call(rbind, all_test_results)

# Save the test results data frame to a CSV file
write.csv(all_test_results_df, file = "S:/Lab_Member/Tobi/Experiments/Exp9_Social-Stress/Analysis/SIS_Analysis/statistics/test_results.csv", row.names = FALSE)

# Save the plots for males and females separately
for (i in seq_along(all_plots)) {
    if (i %% 2 == 0) {
        ggsave(filename = paste0("S:/Lab_Member/Tobi/Experiments/Exp9_Social-Stress/Analysis/SIS_Analysis/statistics/female_", i/2, "_plot.png"), plot = all_plots[[i]], width = 8, height = 5)
    } else {
        ggsave(filename = paste0("S:/Lab_Member/Tobi/Experiments/Exp9_Social-Stress/Analysis/SIS_Analysis/statistics/male_", (i + 1)/2, "_plot.png"), plot = all_plots[[i]], width = 8, height = 5)
    }
}
